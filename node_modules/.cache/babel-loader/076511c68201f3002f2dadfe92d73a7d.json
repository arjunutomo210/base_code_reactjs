{"ast":null,"code":"let BaseUrl = 'http://localhost:3004/posts/';\nexport function RestAPIGet(type, userData) {\n  return new Promise((resolve, reject) => {\n    fetch('http://localhost:3004/posts').then(response => response.json()).then(json => console.log(json));\n  });\n}\nexport function RestAPIPost(type, userData) {\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + type, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    }).then(response => response.json()).then(responsejson => {\n      resolve(responsejson);\n    }).catch(error => {\n      reject(error);\n    }); // console.log(BaseUrl);\n  });\n}\nexport function RestAPIPut(type, userData) {\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + type, {\n      method: 'PUT',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    }).then(response => response.json()).then(responsejson => {\n      resolve(responsejson);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\nexport function RestAPIDelete(type, userData) {\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + type, {\n      method: 'DELETE',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    }).then(response => response.json()).then(responsejson => {\n      resolve(responsejson);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}","map":{"version":3,"sources":["D:/myReact/project-react-app/src/RestAPI.jsx"],"names":["BaseUrl","RestAPIGet","type","userData","Promise","resolve","reject","fetch","then","response","json","console","log","RestAPIPost","method","headers","Accept","body","JSON","stringify","responsejson","catch","error","RestAPIPut","RestAPIDelete"],"mappings":"AAAA,IAAIA,OAAO,GAAG,8BAAd;AAGA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,QAA1B,EAAoC;AACvC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEpCC,IAAAA,KAAK,CAAC,6BAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUE,IAAI,IAAIC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAFlB;AAGH,GALM,CAAP;AAMH;AAED,OAAO,SAASG,WAAT,CAAqBX,IAArB,EAA2BC,QAA3B,EAAqC;AAExC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEpCC,IAAAA,KAAK,CAACP,OAAO,GAAGE,IAAX,EAAiB;AAClBY,MAAAA,MAAM,EAAE,MADU;AAElBC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,kBADH;AAEL,wBAAgB;AAFX,OAFS;AAMlBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAehB,QAAf;AANY,KAAjB,CAAL,CAQKK,IARL,CAQWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EARxB,EASKF,IATL,CASWY,YAAD,IAAkB;AACpBf,MAAAA,OAAO,CAACe,YAAD,CAAP;AACH,KAXL,EAYKC,KAZL,CAYYC,KAAD,IAAW;AACdhB,MAAAA,MAAM,CAACgB,KAAD,CAAN;AACH,KAdL,EAFoC,CAiBpC;AACH,GAlBM,CAAP;AAmBH;AAED,OAAO,SAASC,UAAT,CAAoBrB,IAApB,EAA0BC,QAA1B,EAAoC;AACvC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCC,IAAAA,KAAK,CAACP,OAAO,GAAGE,IAAX,EAAiB;AAClBY,MAAAA,MAAM,EAAE,KADU;AAElBC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,kBADH;AAEL,wBAAgB;AAFX,OAFS;AAMlBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAehB,QAAf;AANY,KAAjB,CAAL,CAQKK,IARL,CAQWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EARxB,EASKF,IATL,CASWY,YAAD,IAAkB;AACpBf,MAAAA,OAAO,CAACe,YAAD,CAAP;AACH,KAXL,EAYKC,KAZL,CAYYC,KAAD,IAAW;AACdhB,MAAAA,MAAM,CAACgB,KAAD,CAAN;AACH,KAdL;AAeH,GAhBM,CAAP;AAiBH;AAED,OAAO,SAASE,aAAT,CAAuBtB,IAAvB,EAA6BC,QAA7B,EAAuC;AAC1C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCC,IAAAA,KAAK,CAACP,OAAO,GAAGE,IAAX,EAAiB;AAClBY,MAAAA,MAAM,EAAE,QADU;AAElBC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,kBADH;AAEL,wBAAgB;AAFX,OAFS;AAMlBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAehB,QAAf;AANY,KAAjB,CAAL,CAQKK,IARL,CAQWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EARxB,EASKF,IATL,CASWY,YAAD,IAAkB;AACpBf,MAAAA,OAAO,CAACe,YAAD,CAAP;AACH,KAXL,EAYKC,KAZL,CAYYC,KAAD,IAAW;AACdhB,MAAAA,MAAM,CAACgB,KAAD,CAAN;AACH,KAdL;AAeH,GAhBM,CAAP;AAiBH","sourcesContent":["let BaseUrl = 'http://localhost:3004/posts/';\r\n\r\n\r\nexport function RestAPIGet(type, userData) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        fetch('http://localhost:3004/posts')\r\n            .then(response => response.json())\r\n            .then(json => console.log(json))\r\n    });\r\n}\r\n\r\nexport function RestAPIPost(type, userData) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        fetch(BaseUrl + type, {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData)\r\n        })\r\n            .then((response) => response.json())\r\n            .then((responsejson) => {\r\n                resolve(responsejson);\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            })\r\n        // console.log(BaseUrl);\r\n    });\r\n}\r\n\r\nexport function RestAPIPut(type, userData) {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(BaseUrl + type, {\r\n            method: 'PUT',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData)\r\n        })\r\n            .then((response) => response.json())\r\n            .then((responsejson) => {\r\n                resolve(responsejson);\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            })\r\n    })\r\n}\r\n\r\nexport function RestAPIDelete(type, userData) {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(BaseUrl + type, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData)\r\n        })\r\n            .then((response) => response.json())\r\n            .then((responsejson) => {\r\n                resolve(responsejson);\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            })\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}