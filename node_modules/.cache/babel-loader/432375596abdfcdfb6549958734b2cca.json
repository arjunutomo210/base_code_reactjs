{"ast":null,"code":"let BaseUrl = 'http://localhost:3004/posts/';\nexport const RestAPIGet = type => {\n  return new Promise((resolve, reject) => {\n    fetch(`http://localhost:3004/posts/${type}`).then(response => response.json()).then(responsejson => {\n      resolve(responsejson);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport function RestAPIPost(type, userData) {\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + type, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    }).then(response => response.json()).then(responsejson => {\n      resolve(responsejson);\n    }).catch(error => {\n      reject(error);\n    }); // console.log(BaseUrl);\n  });\n}\nexport function RestAPIPut(type, userData) {\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + type, {\n      method: 'PUT',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    }).then(response => response.json()).then(responsejson => {\n      resolve(responsejson);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\nexport function RestAPIDelete(type, userData) {\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + type, {\n      method: 'DELETE',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    }).then(response => response.json()).then(responsejson => {\n      resolve(responsejson);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}","map":{"version":3,"sources":["D:/myReact/project-react-app/src/RestAPI.jsx"],"names":["BaseUrl","RestAPIGet","type","Promise","resolve","reject","fetch","then","response","json","responsejson","catch","error","RestAPIPost","userData","method","headers","Accept","body","JSON","stringify","RestAPIPut","RestAPIDelete"],"mappings":"AAAA,IAAIA,OAAO,GAAG,8BAAd;AAGA,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAChC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEpCC,IAAAA,KAAK,CAAE,+BAA8BJ,IAAK,EAArC,CAAL,CACKK,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEWG,YAAD,IAAkB;AACpBN,MAAAA,OAAO,CAACM,YAAD,CAAP;AACH,KAJL,EAKKC,KALL,CAKYC,KAAD,IAAW;AACdP,MAAAA,MAAM,CAACO,KAAD,CAAN;AACH,KAPL;AAQH,GAVM,CAAP;AAWH,CAZM;AAeP,OAAO,SAASC,WAAT,CAAqBX,IAArB,EAA2BY,QAA3B,EAAoC;AAEvC,SAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEpCC,IAAAA,KAAK,CAACN,OAAO,GAACE,IAAT,EAAc;AACfa,MAAAA,MAAM,EAAE,MADO;AAEfC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAFM;AAMfC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf;AANS,KAAd,CAAL,CAQCP,IARD,CAQOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EARpB,EASCF,IATD,CASOG,YAAD,IAAkB;AACpBN,MAAAA,OAAO,CAACM,YAAD,CAAP;AACH,KAXD,EAYCC,KAZD,CAYQC,KAAD,IAAW;AACdP,MAAAA,MAAM,CAACO,KAAD,CAAN;AACH,KAdD,EAFoC,CAiBpC;AACH,GAlBM,CAAP;AAmBH;AAED,OAAO,SAASS,UAAT,CAAoBnB,IAApB,EAA0BY,QAA1B,EAAmC;AACrC,SAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AACnCC,IAAAA,KAAK,CAACN,OAAO,GAACE,IAAT,EAAc;AACfa,MAAAA,MAAM,EAAE,KADO;AAEfC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAFM;AAMfC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf;AANS,KAAd,CAAL,CAQCP,IARD,CAQOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EARpB,EASCF,IATD,CASOG,YAAD,IAAkB;AACpBN,MAAAA,OAAO,CAACM,YAAD,CAAP;AACH,KAXD,EAYCC,KAZD,CAYQC,KAAD,IAAW;AACdP,MAAAA,MAAM,CAACO,KAAD,CAAN;AACH,KAdD;AAeF,GAhBM,CAAP;AAiBJ;AAED,OAAO,SAASU,aAAT,CAAuBpB,IAAvB,EAA6BY,QAA7B,EAAsC;AACzC,SAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAClCC,IAAAA,KAAK,CAACN,OAAO,GAACE,IAAT,EAAc;AACfa,MAAAA,MAAM,EAAE,QADO;AAEfC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAFM;AAMfC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf;AANS,KAAd,CAAL,CAQCP,IARD,CAQOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EARpB,EASCF,IATD,CASOG,YAAD,IAAkB;AACpBN,MAAAA,OAAO,CAACM,YAAD,CAAP;AACH,KAXD,EAYCC,KAZD,CAYQC,KAAD,IAAW;AACdP,MAAAA,MAAM,CAACO,KAAD,CAAN;AACH,KAdD;AAeF,GAhBK,CAAP;AAiBH","sourcesContent":["let BaseUrl = 'http://localhost:3004/posts/';\r\n\r\n\r\nexport const RestAPIGet = (type) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        fetch(`http://localhost:3004/posts/${type}`)\r\n            .then(response => response.json())\r\n            .then((responsejson) => {\r\n                resolve(responsejson);\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            })\r\n    });\r\n}\r\n\r\n\r\nexport function RestAPIPost(type, userData){\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        fetch(BaseUrl+type,{\r\n            method: 'POST',\r\n            headers: {\r\n              Accept: 'application/json',\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData)\r\n        })\r\n        .then((response) => response.json())\r\n        .then((responsejson) => {\r\n            resolve(responsejson);\r\n        })\r\n        .catch((error) => {\r\n            reject(error);\r\n        })\r\n        // console.log(BaseUrl);\r\n    });\r\n}\r\n\r\nexport function RestAPIPut(type, userData){\r\n     return new Promise((resolve, reject)=>{\r\n        fetch(BaseUrl+type,{\r\n            method: 'PUT',\r\n            headers: {\r\n              Accept: 'application/json',\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData)\r\n        })\r\n        .then((response) => response.json())\r\n        .then((responsejson) => {\r\n            resolve(responsejson);\r\n        })\r\n        .catch((error) => {\r\n            reject(error);\r\n        })\r\n     })\r\n}\r\n\r\nexport function RestAPIDelete(type, userData){\r\n    return new Promise((resolve, reject)=>{\r\n        fetch(BaseUrl+type,{\r\n            method: 'DELETE',\r\n            headers: {\r\n              Accept: 'application/json',\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData)\r\n        })\r\n        .then((response) => response.json())\r\n        .then((responsejson) => {\r\n            resolve(responsejson);\r\n        })\r\n        .catch((error) => {\r\n            reject(error);\r\n        })\r\n     })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}